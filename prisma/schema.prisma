generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String    @id @default(cuid())
  name             String?
  email            String?   @unique
  hashedPassword   String?
  emailVerified    DateTime?
  image            String?
  accounts         Account[]
  sessions         Session[]
  stripeCustomerId String?
  orders           Order[]
}

model Product {
  id          String  @id @default(cuid())
  name        String
  description String?
  unit_amount Float
  image       String
  quantity    Float   @default(0)
  orders      Order[]
}

model Order {
  id              String    @id @default(cuid())
  user            User      @relation(fields: [userId], references: [id])
  userId          String
  amount          Float
  currency        String
  status          String
  createdDate     DateTime  @default(now())
  paymentIntentID String?   @unique
  products        Product[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// datasource db {
//   provider = "mongodb"
//   url      = env("DATABASE_URL")
// }

// generator client {
//   provider = "prisma-client-js"
// }

// model Account {
//   id                String  @id @default(auto()) @map("_id") @db.ObjectId
//   userId            String  @db.ObjectId
//   type              String
//   provider          String
//   providerAccountId String
//   refresh_token     String? @db.ObjectId
//   access_token      String? @db.ObjectId
//   expires_at        Int?
//   token_type        String?
//   scope             String?
//   id_token          String?
//   session_state     String?

//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@unique([provider, providerAccountId])
// }

// model Session {
//   id           String   @id @default(auto()) @map("_id") @db.ObjectId
//   sessionToken String   @unique
//   userId       String   @db.ObjectId
//   expires      DateTime
//   user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
// }

// model User {
//   id             String    @id @default(auto()) @map("_id") @db.ObjectId
//   name           String?
//   email          String?   @unique
//   hashedPassword String?
//   emailVerified  DateTime?
//   image          String?
//   accounts       Account[]
//   sessions       Session[]
// }

// // model VerificationToken {
// //   identifier String
// //   token      String   @unique
// //   expires    DateTime

// //   @@unique([identifier, token])
// // }
